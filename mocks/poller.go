// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import gpoll "github.com/eddieowens/gpoll"
import mock "github.com/stretchr/testify/mock"

// Poller is an autogenerated mock type for the Poller type
type Poller struct {
	mock.Mock
}

// Poll provides a mock function with given fields:
func (_m *Poller) Poll() ([]gpoll.Commit, error) {
	ret := _m.Called()

	var r0 []gpoll.Commit
	if rf, ok := ret.Get(0).(func() []gpoll.Commit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gpoll.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *Poller) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartAsync provides a mock function with given fields:
func (_m *Poller) StartAsync() (chan gpoll.Commit, error) {
	ret := _m.Called()

	var r0 chan gpoll.Commit
	if rf, ok := ret.Get(0).(func() chan gpoll.Commit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan gpoll.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *Poller) Stop() {
	_m.Called()
}
