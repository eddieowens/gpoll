// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import git "gopkg.in/src-d/go-git.v4"
import gpoll "github.com/eddieowens/gpoll"
import mock "github.com/stretchr/testify/mock"
import object "gopkg.in/src-d/go-git.v4/plumbing/object"

// GitService is an autogenerated mock type for the GitService type
type GitService struct {
	mock.Mock
}

// Clone provides a mock function with given fields: remote, branch, directory
func (_m *GitService) Clone(remote string, branch string, directory string) (*git.Repository, error) {
	ret := _m.Called(remote, branch, directory)

	var r0 *git.Repository
	if rf, ok := ret.Get(0).(func(string, string, string) *git.Repository); ok {
		r0 = rf(remote, branch, directory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(remote, branch, directory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Diff provides a mock function with given fields: from, to
func (_m *GitService) Diff(from *object.Commit, to *object.Commit) (*gpoll.CommitDiff, error) {
	ret := _m.Called(from, to)

	var r0 *gpoll.CommitDiff
	if rf, ok := ret.Get(0).(func(*object.Commit, *object.Commit) *gpoll.CommitDiff); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gpoll.CommitDiff)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*object.Commit, *object.Commit) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiffRemote provides a mock function with given fields: repo, branch
func (_m *GitService) DiffRemote(repo *git.Repository, branch string) ([]gpoll.CommitDiff, error) {
	ret := _m.Called(repo, branch)

	var r0 []gpoll.CommitDiff
	if rf, ok := ret.Get(0).(func(*git.Repository, string) []gpoll.CommitDiff); ok {
		r0 = rf(repo, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gpoll.CommitDiff)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*git.Repository, string) error); ok {
		r1 = rf(repo, branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLatestRemoteCommit provides a mock function with given fields: repo, branch
func (_m *GitService) FetchLatestRemoteCommit(repo *git.Repository, branch string) (*object.Commit, error) {
	ret := _m.Called(repo, branch)

	var r0 *object.Commit
	if rf, ok := ret.Get(0).(func(*git.Repository, string) *object.Commit); ok {
		r0 = rf(repo, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*git.Repository, string) error); ok {
		r1 = rf(repo, branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeadCommit provides a mock function with given fields: repo
func (_m *GitService) HeadCommit(repo *git.Repository) (*object.Commit, error) {
	ret := _m.Called(repo)

	var r0 *object.Commit
	if rf, ok := ret.Get(0).(func(*git.Repository) *object.Commit); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*git.Repository) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToInternal provides a mock function with given fields: c
func (_m *GitService) ToInternal(c *object.Commit) *gpoll.Commit {
	ret := _m.Called(c)

	var r0 *gpoll.Commit
	if rf, ok := ret.Get(0).(func(*object.Commit) *gpoll.Commit); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gpoll.Commit)
		}
	}

	return r0
}
